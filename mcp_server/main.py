# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T07:35:36+00:00



import argparse
import json
import os
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity, HTTPBasic, HTTPBearer

from models import (
    AccountResponse,
    Field401Response,
    Field403Response,
    FieldDatamodelCodeGeneratorRootSpecialGetResponse,
    FieldProviderExternalIdApplicationsApplicationIdDeleteResponse,
    FieldProviderExternalIdApplicationsApplicationIdDeleteResponse1,
    FieldProviderExternalIdApplicationsPostRequest,
    FieldProviderExternalIdApplicationsPostResponse,
    FieldProviderExternalIdApplicationsPostResponse1,
    MessengerAccountResponse,
    MessengerExternalIdPatchRequest,
    MessengerExternalIdPatchResponse,
    MessengerExternalIdPatchResponse1,
    MessengerPostRequest,
    MessengerPostResponse,
    Provider,
    VSMAccountResponse,
    WAAccountResponse,
)

app = MCPProxy(
    contact={
        'email': 'devrel@vonage.com',
        'name': 'Vonage DevRel',
        'url': 'https://developer.nexmo.com/',
    },
    description='The External Accounts API is used to manage accounts for Viber Business Messages, Facebook Messenger and Whatsapp for use in the [Messages](https://developer.nexmo.com/messages/overview) and [Dispatch](https://developer.nexmo.com/dispatch/overview) APIs.',
    title='External Accounts API',
    version='0.1.5',
    servers=[{'url': 'https://api.nexmo.com/beta/chatapp-accounts'}],
)


@app.get(
    '/#-datamodel-code-generator-#-root-#-special-#',
    tags=['account_retrieval'],
    security=[
        HTTPBearer(name="None"),
        HTTPBasic(name="None"),
    ],
)
def get_all_accounts(
    provider: Optional[Provider] = None,
    page_number: Optional[int] = 1,
    page_size: Optional[int] = 20,
):
    """
    Retrieve all accounts you own
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/messenger',
    tags=['messenger_account_management'],
    security=[
        HTTPBearer(name="None"),
        HTTPBasic(name="None"),
    ],
)
def create_messenger_account(body: MessengerPostRequest):
    """
    Create a Messenger account
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/messenger/{external_id}',
    tags=['messenger_account_management'],
    security=[
        HTTPBearer(name="None"),
        HTTPBasic(name="None"),
    ],
)
def delete_messenger_account(external_id: str):
    """
    Delete a Messenger account
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/messenger/{external_id}',
    tags=['account_retrieval', 'messenger_account_management'],
    security=[
        HTTPBearer(name="None"),
        HTTPBasic(name="None"),
    ],
)
def get_messenger_account(external_id: str):
    """
    Retrieve a Messenger account
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/messenger/{external_id}',
    tags=['messenger_account_management'],
    security=[
        HTTPBearer(name="None"),
        HTTPBasic(name="None"),
    ],
)
def update_messenger_account(
    external_id: str, body: MessengerExternalIdPatchRequest = ...
):
    """
    Update a Messenger account
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/viber_service_msg/{external_id}',
    tags=['account_retrieval'],
    security=[
        HTTPBearer(name="None"),
        HTTPBasic(name="None"),
    ],
)
def get_v_s_m_account(external_id: str):
    """
    Retrieve a Viber Service Message account
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/whatsapp/{external_id}',
    tags=['account_retrieval'],
    security=[
        HTTPBearer(name="None"),
        HTTPBasic(name="None"),
    ],
)
def get_w_a_account(external_id: str):
    """
    Retrieve a Whatsapp account
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/{provider}/{external_id}/applications',
    tags=['application_account_linking'],
    security=[
        HTTPBearer(name="None"),
        HTTPBasic(name="None"),
    ],
)
def link_application(
    provider: Provider,
    external_id: str = ...,
    body: FieldProviderExternalIdApplicationsPostRequest = ...,
):
    """
    Link application to an account
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/{provider}/{external_id}/applications/{application_id}',
    tags=['application_account_linking'],
    security=[
        HTTPBearer(name="None"),
        HTTPBasic(name="None"),
    ],
)
def unli_without_applicationnk_application(
    provider: Provider, external_id: str = ..., application_id: str = ...
):
    """
    Unlink application from an account
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
